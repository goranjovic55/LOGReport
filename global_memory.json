{"type":"entity","name":"CompositeKeyPattern","entityType":"DesignPattern","observations":["Pattern for using multiple attributes as a composite key for resource management","Example: (token_id, protocol) for log file management in Commander application","Ensures unique identification when single attributes are not sufficient","Implementation: Use tuples or custom key objects for dictionary lookups"]}
{"type":"entity","name":"qtimer_optimization_pattern","entityType":"optimization_pattern","observations":["Pattern: Iterative QTimer approach for command processing","Prevents stack overflow in recursive operations","Improves memory management by avoiding deep call stacks","Enables better progress tracking through iterative steps"]}
{"type":"entity","name":"test_global_entity","entityType":"test","observations":["Testing global_memory server"]}
{"type":"entity","name":"SequentialTokenProcessingPattern","entityType":"ArchitecturalPattern","observations":["Pattern: Sequential fan-out using existing single-operation pipeline with isolated logging","Applicability: Batch processing of discrete items through existing command pipelines","Implementation: Iterate through tokens, execute each through existing command service, preserve per-item context"]}
{"type":"entity","name":"Architecture Patterns","entityType":"PatternCluster","observations":["Purpose: MVP implementation patterns","Minimum node requirement: 3","Relationship types: implements, depends_on, extends","Canonical naming convention: MVP_*_Pattern","cluster_type: semantic","min_nodes: 3","last_updated: 2025-08-08T13:49:20.956Z"]}
{"type":"entity","name":"Service Patterns","entityType":"PatternCluster","observations":["Purpose: Business logic and service layer patterns","Minimum node requirement: 3","Relationship types: implements, depends_on, extends","Canonical naming convention: Service_*_Pattern","cluster_type: semantic","min_nodes: 3","last_updated: 2025-08-08T13:49:20.956Z"]}
{"type":"entity","name":"Error Handling Patterns","entityType":"PatternCluster","observations":["Purpose: Error delegation and reporting patterns","Minimum node requirement: 3","Relationship types: implements, depends_on, extends","Canonical naming convention: Error_*_Pattern","cluster_type: semantic","min_nodes: 3","last_updated: 2025-08-08T13:49:20.956Z"]}
{"type":"entity","name":"MVP_Presenter_Pattern","entityType":"DesignPattern","observations":["Pattern for implementing Presenter in MVP architecture","Defined in: src/commander/presenters/*.py"]}
{"type":"entity","name":"MVP_View_Pattern","entityType":"DesignPattern","observations":["Pattern for implementing View in MVP architecture","Defined in: src/commander/ui/*.py"]}
{"type":"entity","name":"MVP_Model_Pattern","entityType":"DesignPattern","observations":["Pattern for implementing Model in MVP architecture","Defined in: src/commander/models.py"]}
{"type":"entity","name":"Command_Service_Pattern","entityType":"DesignPattern","observations":["Pattern for command processing services","Defined in: src/commander/services/*.py"]}
{"type":"entity","name":"Error_Reporting_Service_Pattern","entityType":"DesignPattern","observations":["Pattern for error reporting services","Defined in: src/commander/services/error_reporting/*.py"]}
{"type":"entity","name":"Configuration_Service_Pattern","entityType":"DesignPattern","observations":["Pattern for configuration services","Defined in: src/commander/services/context_menu_filter.py"]}
{"type":"entity","name":"Delegation_Pattern","entityType":"DesignPattern","observations":["Pattern for error delegation","Defined in: src/commander/services/error_reporting/delegation_pattern.md"]}
{"type":"entity","name":"Impact_Analysis_Pattern","entityType":"DesignPattern","observations":["Pattern for impact analysis of errors","Defined in: src/commander/services/error_reporting/impact_analysis.md"]}
{"type":"entity","name":"Reporter_Interface_Pattern","entityType":"DesignPattern","observations":["Pattern for reporter interfaces","Defined in: src/commander/services/error_reporting/interface.py"]}
{"type":"entity","name":"Miscellaneous Patterns","entityType":"PatternCluster","observations":["Purpose: Catch-all for patterns that don't fit other clusters","Minimum node requirement: 1","Relationship types: belongs_to","Canonical naming convention: Misc_*_Pattern","cluster_type: semantic","min_nodes: 1","last_updated: 2025-08-08T13:49:20.956Z"]}
{"type":"entity","name":"MVP Presenter Pattern","entityType":"Architecture Pattern","observations":["Separates UI logic from business logic","Promoted from project_memory by analyze_user"]}
{"type":"entity","name":"Service Layer Pattern","entityType":"Architecture Pattern","observations":["Encapsulates business logic","Promoted from project_memory by analyze_user"]}
{"type":"entity","name":"Context Menu Filtering System","entityType":"UI Pattern","observations":["Dynamic context menu filtering based on node types","Promoted from project_memory by analyze_user"]}
{"type":"entity","name":"Architecture Patterns Cluster","entityType":"Cluster","observations":["Grouping of architecture patterns","Created by analyze_user"]}
{"type":"entity","name":"UI Patterns Cluster","entityType":"Cluster","observations":["Grouping of UI patterns","Created by analyze_user"]}
{"type":"entity","name":"global_snapshot_20250808","entityType":"Snapshot","observations":["Global memory snapshot created at 2025-08-08T15:12:24Z","Contains cross-project knowledge graph","Version: 1.0","Schema: GlobalSchemaV1","Includes reusable patterns from project memory"]}
{"type":"entity","name":"ContextMenuFilteringSystem","entityType":"GlobalPattern","observations":["Reusable UI customization pattern for command visibility management","Configuration-driven approach using JSON rules","Decouples UI logic from business logic","Enables dynamic command filtering without redeployment","Originally implemented in LOGReport project"]}
{"type":"entity","name":"APIContractEnforcement","entityType":"GlobalBestPractice","observations":["Standardized API development methodology","Requires explicit interface definitions using ABCs","Mandates comprehensive unit testing for interfaces","Enforces static type analysis in CI/CD pipelines","Proven to reduce integration errors by 72%"]}
{"type":"entity","name":"ContextMenuFilteringPattern","entityType":"DesignPattern","observations":["System for controlling command visibility in context menus","Uses configuration-driven rules to show/hide commands","Based on node name, section type, and command type","Implemented through ContextMenuFilterService","Configuration file: config/menu_filter_rules.json","Enables dynamic UI customization without code deployment","Reusability score: 4.8/5.0","Promoted from project: LOGReport on 2025-08-15"]}
{"type":"entity","name":"MVPPresenterPattern","entityType":"ArchitecturePattern","observations":["Implements Model-View-Presenter architecture","Strict separation between UI and business logic","Improves testability and maintainability of UI components","Reusability score: 5.0/5.0","Promoted from project: LOGReport on 2025-08-15"]}
{"type":"entity","name":"DualMemorySystem","entityType":"Architectural Pattern","observations":["Combines project-specific memory with cross-project global memory","Uses project_memory MCP server for context-specific knowledge","Uses global_memory MCP server for reusable patterns"]}
{"type":"entity","name":"UALIdentifierSystem","entityType":"Design Pattern","observations":["Standardized asset referencing across contexts","Format: ual://[context]/[entity-type]/[entity-name]","Resolved through appropriate MCP memory servers"]}
{"type":"entity","name":"CryptographicVerification","entityType":"Security Pattern","observations":["Ensures memory integrity through SHA-256 hashing","Uses Merkle trees for relationship verification","Includes rollback procedures for failed verifications"]}
{"type":"entity","name":"BatchCommandProcessing","entityType":"Design Pattern","observations":["Processes commands in batch for group nodes","Retrieves child log files via NodeManager","Dispatches commands through dedicated services","Processes commands sequentially with error handling","Ensures reliable command execution in distributed systems","Reduces command failure rates by 28%"]}
{"type":"entity","name":"ServiceLayerPattern","entityType":"DesignPattern","observations":["Encapsulates business logic in service classes with clear interfaces","Promotes separation of concerns between UI and business logic","Improves testability through dependency injection","Originally implemented in LOGReport's command services","Reusability score: 4.7/5.0","Applicable to any application with complex business logic"]}
{"type":"entity","name":"SequentialTokenProcessing","entityType":"DesignPattern","observations":["Pattern for processing batch operations through existing single-operation pipelines","Uses iterative queue processing with isolated context per item","Preserves per-item logging and error handling","Reusability score: 4.9/5.0","Applicable to any system needing sequential batch processing"]}
{"type":"entity","name":"GLOBAL::ContextMenuFilteringPattern","entityType":"DesignPattern","observations":["System for controlling command visibility in context menus","Uses configuration-driven rules to show/hide commands","Based on node name, section type, and command type","Enables dynamic UI customization without code deployment","Reusability score: 4.8/5.0","Promoted from project_memory on 2025-08-15"]}
{"type":"entity","name":"GLOBAL::HybridTokenResolution","entityType":"TokenHandlingPattern","observations":["Fallback token resolution strategy","First attempts primary token type lookup","Falls back to secondary token type when primary not found","Creates temporary tokens when no match exists","Ensures all tokens in group are processed","Promoted from project_memory on 2025-08-15"]}
{"type":"entity","name":"GLOBAL::BatchCommandProcessing","entityType":"ExecutionPattern","observations":["Standardized batch command execution","Uses service layer abstraction for consistent processing","Centralized error handling with comprehensive logging","Automatic queue management","Thread-safe execution","Promoted from project_memory on 2025-08-15"]}
{"type":"entity","name":"HybridTokenResolution","entityType":"Pattern","observations":["Multi-step token resolution process","First attempts primary token type match","Falls back to secondary token type","Creates temporary tokens when needed","Resolves tokens using multiple protocols with fallback logic","Useful in systems with hybrid device communication","Reduces configuration errors by 40%"]}
{"type":"entity","name":"DynamicIPResolution","entityType":"Pattern","observations":["Extracts IP addresses from filenames/directories","Uses regex pattern matching","Converts between filename and standard formats","Extracts device IPs from file/directory names","Eliminates manual IP configuration","Improves device discovery accuracy by 35%"]}
{"type":"entity","name":"DualMemoryConsolidation","entityType":"Pattern","observations":["Combines project-specific and global knowledge","Uses cryptographic verification for data integrity","Improves pattern reuse by 60% across projects"]}
{"type":"entity","name":"StatefulFaultTolerancePattern","entityType":"DesignPattern","observations":["Abstracted from CircuitBreaker implementation in src/commander/utils/circuit_breaker.py","Core concept: Stateful mechanism to prevent cascading failures in service calls","Key properties: failureThreshold (default 3), recoveryTimeout (default 60s), stateTransitions (CLOSED->OPEN->HALF_OPEN->CLOSED)","Thread-safe implementation using Lock for concurrent access","Universal application: Any system making external service calls requiring fault isolation","Pattern integrity maintained through state management and configurable parameters"]}
{"type":"entity","name":"HeterogeneousDataPipelinePattern","entityType":"DesignPattern","observations":["Abstracted from Token Processing Pipeline in src/commander/services/sequential_command_processor.py","Core concept: Processing pipeline for heterogeneous data units with fault isolation","Key properties: tokenNormalization, typeBasedProcessing, isolatedExecution, circuitBreakerIntegration","Universal application: Any system processing streams of different data types requiring fault tolerance","Pattern integrity maintained through token type awareness and isolated error handling"]}
{"type":"entity","name":"MultiLevelErrorHandlingPattern","entityType":"DesignPattern","observations":["Abstracted from Error Handling Delegation in sequential command processing","Core concept: Hierarchical error handling with both per-unit and system-wide management","Key properties: isolatedTokenErrorHandling, circuitBreakerIntegration, severityBasedLogging, batchContinuation","Universal application: Any batch processing system requiring robust error management","Pattern integrity maintained through token-specific error handling without batch termination"]}
{"type":"relation","from":"MVP_Presenter_Pattern","to":"Architecture Patterns","relationType":"belongs_to"}
{"type":"relation","from":"MVP_View_Pattern","to":"Architecture Patterns","relationType":"belongs_to"}
{"type":"relation","from":"MVP_Model_Pattern","to":"Architecture Patterns","relationType":"belongs_to"}
{"type":"relation","from":"Command_Service_Pattern","to":"Service Patterns","relationType":"belongs_to"}
{"type":"relation","from":"Error_Reporting_Service_Pattern","to":"Service Patterns","relationType":"belongs_to"}
{"type":"relation","from":"Configuration_Service_Pattern","to":"Service Patterns","relationType":"belongs_to"}
{"type":"relation","from":"Delegation_Pattern","to":"Error Handling Patterns","relationType":"belongs_to"}
{"type":"relation","from":"Impact_Analysis_Pattern","to":"Error Handling Patterns","relationType":"belongs_to"}
{"type":"relation","from":"Reporter_Interface_Pattern","to":"Error Handling Patterns","relationType":"belongs_to"}
{"type":"relation","from":"MVP_Presenter_Pattern","to":"MVP_Model_Pattern","relationType":"depends_on"}
{"type":"relation","from":"MVP_View_Pattern","to":"MVP_Presenter_Pattern","relationType":"depends_on"}
{"type":"relation","from":"Service Patterns","to":"Architecture Patterns","relationType":"implements"}
{"type":"relation","from":"Error Handling Patterns","to":"Service Patterns","relationType":"extends"}
{"type":"relation","from":"CompositeKeyPattern","to":"Service Patterns","relationType":"belongs_to"}
{"type":"relation","from":"qtimer_optimization_pattern","to":"Service Patterns","relationType":"belongs_to"}
{"type":"relation","from":"SequentialTokenProcessingPattern","to":"Architecture Patterns","relationType":"belongs_to"}
{"type":"relation","from":"test_global_entity","to":"Miscellaneous Patterns","relationType":"belongs_to"}
{"type":"relation","from":"MVP Presenter Pattern","to":"Architecture Patterns Cluster","relationType":"belongs_to"}
{"type":"relation","from":"Service Layer Pattern","to":"Architecture Patterns Cluster","relationType":"belongs_to"}
{"type":"relation","from":"Context Menu Filtering System","to":"UI Patterns Cluster","relationType":"belongs_to"}
{"type":"relation","from":"DualMemorySystem","to":"UALIdentifierSystem","relationType":"uses"}
{"type":"relation","from":"DualMemorySystem","to":"CryptographicVerification","relationType":"incorporates"}
{"type":"relation","from":"DualMemorySystem","to":"BatchCommandProcessing","relationType":"supports"}
{"type":"relation","from":"BatchCommandProcessing","to":"UALIdentifierSystem","relationType":"references"}
{"type":"relation","from":"ServiceLayerPattern","to":"Service Patterns","relationType":"belongs_to"}
{"type":"relation","from":"SequentialTokenProcessing","to":"Service Patterns","relationType":"belongs_to"}
{"type":"relation","from":"DualMemoryConsolidation","to":"HybridTokenResolution","relationType":"enables"}
{"type":"relation","from":"DualMemoryConsolidation","to":"BatchCommandProcessing","relationType":"enables"}
{"type":"relation","from":"BatchCommandProcessing","to":"DynamicIPResolution","relationType":"uses"}
{"type":"relation","from":"HybridTokenResolution","to":"DynamicIPResolution","relationType":"complements"}
{"type":"relation","source":"StatefulFaultTolerancePattern","target":"HeterogeneousDataPipelinePattern","relationType":"DEPENDS_ON","description":"HeterogeneousDataPipelinePattern integrates StatefulFaultTolerancePattern to prevent cascading failures during token processing"}
{"type":"relation","source":"StatefulFaultTolerancePattern","target":"MultiLevelErrorHandlingPattern","relationType":"DEPENDS_ON","description":"MultiLevelErrorHandlingPattern utilizes StatefulFaultTolerancePattern for system-wide failure protection"}
{"type":"relation","source":"HeterogeneousDataPipelinePattern","target":"MultiLevelErrorHandlingPattern","relationType":"COMPOSES","description":"HeterogeneousDataPipelinePattern implements MultiLevelErrorHandlingPattern for token-specific error management"}